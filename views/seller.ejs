<!doctype html>
<html>
  <head>
    <title>initLoop - Herramientas para vendedores</title>
    <style>
        table {
            border: 1px solid;
            width: 75%;
        }
        td {
            border: 1px solid lightgray;
            position: relative;
            width: 100px;
        }
        th {
            text-align: left;
            width: 100px;
        }
        div {
            position: absolute;
            bottom: 0px;
            height: 15px;
            z-index: -1;
        }
        .conversion_rate div {
            background-color: lightsalmon
        }
        .today_visits div {
            background-color: lightpink;
        }
        .sold_today div {
            background-color: lightblue;
        }
    </style>

    <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
    
  </head>
  <body>
    <a href="http://initloop.com">Volver a Home</a>
    <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
    <h1>Conversi√≥n por producto</h1>
    <!--    <input type="text" name="title_filter" id="title_filter">    -->
    <input type="search" class="light-table-filter" data-table="order-table" placeholder="Filtrar por Keywords">
    <br />
    <br />
    <table id="stats_table" class="table order-table"></table>

    
    
    <script src="/js/d3.v3.min.js" charset="utf-8"></script>
    
    
    <script>
    
        (function(document) {
            'use strict';

            var LightTableFilter = (function(Arr) {

                var _input;

                function _onInputEvent(e) {
                    _input = e.target;
                    var tables = document.getElementsByClassName(_input.getAttribute('data-table'));
                    Arr.forEach.call(tables, function(table) {
                        Arr.forEach.call(table.tBodies, function(tbody) {
                            Arr.forEach.call(tbody.rows, _filter);
                        });
                    });
                }

                function _filter(row) {
                    var text = row.textContent.toLowerCase(), val = _input.value.toLowerCase();
                    row.style.display = text.indexOf(val) === -1 ? 'none' : 'table-row';
                }

                return {
                    init: function() {
                        var inputs = document.getElementsByClassName('light-table-filter');
                        Arr.forEach.call(inputs, function(input) {
                            input.oninput = _onInputEvent;
                        });
                    }
                };
            })(Array.prototype);

            document.addEventListener('readystatechange', function() {
                if (document.readyState === 'complete') {
                    LightTableFilter.init();
                }
            });

        })(document);
        

        /*
        function init() {
            var sorter = tsorter.create('stats_table');
        }
            
        window.onload = init;
        */
        

        
 
        
        $('#title_filter').keypress(function(event){
            var char = String.fromCharCode(event.which);
            var txt = $(this).val();
            var rows = d3.select('tbody') 
            .selectAll('tr') 
                .data(data, function(d) { return d.title })
                .enter() 
                .filter(function(d) { return d.today_visits > 50 })
                //.filter(function(d) { if  (d.title(new RegExp(d3.select('#title_filter').property('value')))) return true })
            
        });


        var table = d3.select('#stats_table')
        // set up the table header
        table.append('thead')
            .append('tr')
            .selectAll('th')
                .data(['Titulo', 'Visitas', 'Ventas', 'Conversion(%)'])
            .enter()
                .append('th')
                .text(function (d) { return d })

        table.append('tbody')
        
        function setupData(stats) {
            // first, select the table and join the data to its rows
            // just in case we have unsorted data, use the item's title
            // as a key for mapping data on update
            var rows = d3.select('tbody')
                .selectAll('tr')
                .data(stats, function(d) { return d.title })
                

            // if you do end up having variable-length data,
            // uncomment this line to remove the old ones.
            // rows.exit().remove()

            // For new data, we create rows of <tr> containing
            // a <td> for each item.
            // d3.map().values() converts an object into an array of
            // its values
            var entertd = rows.enter()
                .append('tr')
                    .selectAll('td')
                        .data(function(d) { return d3.map(d).values() })
                    .enter()
                        .append('td')
            
            entertd.append('div')
            entertd.append('span')

            // now that all the placeholder tr/td have been created
            // and mapped to their data, we populate the <td> with the data.

            // First, we split off the individual data for each td.
            // d3.map().entries() returns each key: value as an object
            // { key: "key", value: value}
            // to get a different color for each column, we set a
            // class using the attr() function.

            // then, we add a div with a fixed height and width
            // proportional to the relative size of the value compared
            // to all values in the input set.
            // This is accomplished with a linear scale (d3.scale.linear)
            // that maps the extremes of values to the width of the td,
            // which is 100px

            // finally, we display the value.  For the title entry, the div
            // is 0px wide
            var td = rows.selectAll('td')
                .data(function(d) { return d3.map(d).entries() })
                .attr('class', function (d) { return d.key })
            
            // the simple addition of the transition() makes the
            // bars update smoothly when the data changes
            td.select('div')
                .transition()
                .duration(800)
                .style('width', function(d) {
                    switch (d.key) {
                        case 'conversion_rate' :
                            // percentage scale is static
                            scale = d3.scale.linear()
                                .domain([0, 1])
                                .range([0, 100])
                            break;
                        case 'today_visits': 
                        case 'sold_today' :
                            scale = d3.scale.linear()
                            .domain(d3.extent(stats, function(d1) { return d1[d.key] }))
                            .range([0, 100])
                            break;
                        default:
                            return '0px'
                    }
                    return scale(d.value) + 'px'
                })
            td.select('span')
                .text(function(d) {
                    if (d.key == 'conversion_rate') {
                        return Math.round(100*d.value).toFixed(2) + '%';
                    }
                    return d.value
                })
        }
        
        
        var socket = io();

        //var data = [];
        var stats;
        socket.on('sellers-'.concat(<%= seller %>), function(msg){
            stats = [];
            var seller = $.parseJSON(msg);
            var items = seller['items'];
            for(item in items) {
                var item_data = items[item];
                stats.push({'title': item_data['title'], 'today_visits': item_data['today_visits'], 'sold_today': item_data['sold_today'], 'conversion_rate': item_data['conversion_rate']});
            }
            setupData(stats);
            //setupData(JSON.parse(msg).items)
        });
        
        function randomizeData() {
            var ret = []
            for (var i = 0; i < 1000; i++) {
                ret.push({
                    title: "Item " + i,
                    today_visits: Math.round(Math.random() * 300),
                    sold_today: Math.round(Math.random() * 200),
                    conversion_rate: Math.random()
                })
            }
            return ret
        }

    </script>
    <!-- <script src="http://www.terrill.ca/sorting/tsorter/dist/tsorter.min.js" type="text/javascript"></script> -->
  </body>
</html>
